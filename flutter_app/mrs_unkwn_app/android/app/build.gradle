plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'com.mrsunkwn.mrs_unkwn_app'

    // Hart setzen, um "compileSdkVersion is not specified" auszuschließen
    compileSdk 35

    defaultConfig {
        applicationId "com.mrsunkwn.mrs_unkwn_app"
        minSdk 23
        targetSdk 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // AGP 8.x verlangt Java 17
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {
        release {
            // Für CI/signing ohne Keystore
            signingConfig signingConfigs.debug
            // Optional: Minify, wenn benötigt
            // minifyEnabled true
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // optional debug-spezifische Flags
        }
    }

    // Optional: Falls es Ressourcen-Kollisionen gibt
    // packaging {
    //     resources {
    //         excludes += ["META-INF/*"]
    //     }
    // }
}

flutter {
    // Pfad zur Flutter-App
    source '../..'
}

dependencies {
    // Keine explizite Kotlin-Stdlib nötig (wird vom Plugin verwaltet)
    // Weitere App-Dependencies hier eintragen, falls erforderlich
}
